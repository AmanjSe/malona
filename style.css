@import url('https://fonts.googleapis.com/css2?family=Aref+Ruqaa:wght@400;700&family=Mirza:wght@400;500;600;700&display=swap');

*{
    margin:0px;
    padding:0px;
    box-sizing: border-box;
    font-family:"Mirza", serif;
}
body{
    direction: ltr;
}

:root{
    /* colors */
    /* CSS Variables:
   - Can be declared in any selector.
   - Scope = the selector where declared + its children.
   - Use :root {} for global variables (best practice), and it can be reused in the whole document 
    */
    --white-color:#F9F3EF;
    --dark-color:rgb(69, 104, 130);
    --primary-color:rgb(27, 60, 83);
    --secondary-color:#D2C1B6;
    --light-pink-color:#faf4f5;
    --medium-gray-color:#ccc;

    /* font size */
    --font-size-s:0.9rem;
    --font-size-n:1rem;
    --font-size-m:1.12rem;
    --font-size-l:1.5rem;
    --font-size-xl:2rem;
    --font-size-xxl:2.3rem;

    /* font-weight */
    --font-weight-normal:400;
    --font-weight-medium:500;
    --font-weight-semibold:600;
    --font-weight-bold:700;

    /* border radius */
    --border-radius-s:8px;
    --border-radius-m:30px;
    --border-radius-circle:50%;

    /* site max width */
    --site-max-width:1300px;

}

html{
    scroll-behavior: smooth;
}
/* styling for whole site */
ul{
    list-style: none;
    /* 
    scroll-behavior options:
   auto   = instant jump (default)
   smooth = animated scrolling
    */
}

a{
    text-decoration: none;
}
button{
    cursor:pointer;
    border:none;
    background:none;
}
img{
    width: 100%;
}
.section-content{
    margin:0 auto;
    padding: 0 20px;
    max-width: var(--site-max-width);
}

.section-title{
    text-align: center;
    padding: 60px 0 100px;
    text-transform: uppercase;
    font-size: var(--font-size-xl);
}

.section-title::after{
    content: "";
    width: 80px;
    height: 5px;
    display: block;
    background: var(--primary-color);
    margin: 10px auto 0;
    border-radius: var(--border-radius-s);
}
/* navbar styling */
header{
    position: fixed;
    /* 
   static   → default, normal flow
   relative → offset relative to itself
   absolute → positioned relative to nearest positioned ancestor, removed from flow
   fixed    → fixed to viewport, removed from flow, doesn’t scroll
   sticky   → behaves relative until threshold, then sticks inside parent 
    */
    z-index: 5;
    /* z-index , must have position to work 
    z-index use cases:
   - Fixed/sticky headers
   - Modals, popups, dialogs
   - Dropdown menus
   - Tooltips and popovers
   - Overlapping cards/elements
   - Floating buttons/icons
    */
    width: 100%;
    background: var(--primary-color);
}

header .navbar{
    display:flex;
    align-items: center;
    justify-content: space-between;
    padding:20px;
}
.navbar .nav-menu{
    display: flex;
    gap:10px
}
.navbar .nav-menu .nav-link{
    padding: 10px 18px;
    color: var(--white-color);
    border-radius: var(--border-radius-m);
    font-size: var(--font-size-m);
    transition:0.5s ease;
    /* 
    CSS transitions:
   - Smoothly animates property changes over time
   - Syntax: transition: property duration timing-function delay
   - Example: transition: background-color 0.5s ease-in-out 0s

   transition-duration → how long the animation lasts
   transition-delay → how long to wait before starting the animation
    */
}
.navbar .nav-menu .nav-link:hover{
    color: var(--primary-color);
    background: var(--secondary-color);
}

/* 
:where(#menu-close-button, #menu-open-button) 
= groups selectors with ZERO specificity (easy to override). 

Alternatives: 
- #id, #id → same effect but high specificity 
- .class → cleaner & reusable 
- [attr=value] → if using attributes 
- :is() → same grouping but keeps normal specificity 

Specificity Ladder (weak → strong)

:where() (specificity = 0)

Element selectors (div, button, p)

Class selectors (.btn), pseudo-classes (:hover)

Attribute selectors ([type="text"])

ID selectors (#menu)

Inline styles (style="...")

!important (overrides everything, but should be last resort)

    id selector has the highest priority but when multiple selectors were available the last selector will be selected (this for id,class,pseudo class,and element ) 
    the sequence of their prorities like down below :
    declarations marked !important -> inline style ( attribute in html ) -> id selector -> class , pseudo class -> element selector -> universal selector
    NOTE//
    universal selector : has the lowest priority
    declarations marked !important : has the highest priority

    here is the rule to specificity : 
    [inline styles] – [IDs] – [classes/attributes/pseudo-classes] – [elements/pseudo-elements]

*/

.navbar :where(#menu-close-button, #menu-open-button){
    display: none; 
}
.navbar .nav-logo .logo-text{
    color: var(--white-color);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
}
/* hero section styling */
.hero-section{
    background: var(--primary-color);
    min-height: 100vh;
    /* 
    vh unit → 1vh = 1% of viewport height
   min-height: 100vh → element is at least full screen height
   Common uses: hero sections, centering, full-page modals, responsive layouts 
    */
}

.hero-section .section-content{
    display: flex;
    align-items: center;
    min-height: 100vh;
    color: var(--white-color);
    justify-content: space-between;
}

.hero-section .hero-details .title{
    font-size: var(--font-size-xxl);
    color: var(--secondary-color);
    font-family: "Aref ruqaa",serif ;
}

.hero-section .hero-details .subtitle{
    font-size: var(--font-size-xl);
    margin-top: 8px;
    max-width: 70%;
    font-weight: var(--font-weight-semibold);
}

.hero-section .hero-details .description{
    font-size: var(--font-size-m);
    max-width: 70%;
    margin: 24px 0 40px;
}

.hero-section .hero-details .buttons{
    display: flex;
    gap: 23px;
}

.hero-section .hero-details .button{
    padding: 10px 26px;
    color: var(--primary-color);
    background: var(--secondary-color);
    border: 2px solid transparent;
    border-radius: var(--border-radius-m);
    font-weight: var(--font-weight-medium);
    transition: 0.5s ease;
}

.hero-section .hero-details .button:hover, 
.hero-section .hero-details .contact-now
{
    color: var(--white-color);
    border-color: var(--white-color);
    background: transparent;
}

.hero-section .hero-details .contact-now:hover{
    color: var(--primary-color);
    border-color: var(--secondary-color);
    background: var(--secondary-color);
}

.hero-section .hero-image-wrapper{
    max-width: 500px;
    margin-right: 30px;
}

.hero-section .hero-image-wrapper .hero-image{
    border-radius: var(--border-radius-circle);
}

/* about section styling */
.about-section{
    padding:120px 0;
    background: var(--light-pink-color);
}

.about-section .section-content{
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 50px;

}

.about-section .about-image-wrapper .about-image{
    width: 400px;
    height: 400px;
    object-fit: cover;
    /* 
    → image/video fills container completely
    → maintains aspect ratio
    → may crop edges to fit
    Other values: fill, contain, none, scale-down
    */
    border-radius: var(--border-radius-circle);
}

.about-section .about-details .text{
    line-height: 30px;
    margin: 50px 0 30px;
    text-align: center;
    font-size: var(--font-size-m);
}

.about-section .about-details .section-title{
    padding: 0px;
}

.about-section .about-details{
    max-width: 50%;
}

.about-section .social-link-list{
    display: flex;
    gap: 25px;
    justify-content: center;
}

.about-section .social-link-list .social-link{
    color: var(--primary-color);
    font-size:var(--font-size-l);
    transition: ease 0.5s;
}

.about-section .social-link-list .social-link:hover{
    color: var(--dark-color);
}

/* menu section styling */

.menu-section{
    background: var(--dark-color);
    color: var(--white-color);
    padding:50px 0 50px;
}
.menu-section .menu-list{
    display:flex;
    flex-wrap: wrap;
    /* flex-wrap: wrap;
        → image/video fills container completely
        → maintains aspect ratio
        → may crop edges to fit
        Other values: fill, contain, none, scale-down
    */
    gap: 110px;
    align-items: center;
    justify-content: space-between;
}

.menu-section .menu-list .menu-item{
    display: flex;
    align-items: center;
    text-align: center;
    flex-direction: column;
    justify-content: space-between;
    width: calc(100% / 3 - 110px);
}

.menu-section .menu-list .menu-item .menu-image{
    max-width: 83%;
    aspect-ratio: 1;
    /* 
    aspect-ratio: width/height
   → keeps a proportional relationship between width and height
   → if only width is set, height is calculated automatically:
        height = width / (width/height)
   → if only height is set, width is calculated automatically:
        width = height * (width/height)
   → defining both width and height may override the ratio
   → example: 1 → square, 16/9 → widescreen ratio
    */
    margin-bottom: 15px;
    object-fit: contain;
}

.menu-section .menu-list .menu-item .name{
    margin: 12px 0;
    font-size: var(--font-size-l);
    font-weight: var(--font-weight-semibold);
}

.menu-section .menu-list .menu-item .text{
    font-size: var(--font-size-m);
}

/* Testimonials section styling */
.testimonials-section{
    padding: 50px 0 100px;
    background: var(--light-pink-color)
}
      

.testimonials-section .slider-wrapper{
    overflow: hidden;
    margin: 0 60px 50px;
}

.testimonials-section .testimonial{
    user-select: none;
    padding:35px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
}

.testimonials-section .testimonial .user-image{
    width: 180px;
    height: 180px;
    margin-bottom: 50px;
    object-fit: cover;
    border-radius: var(--border-radius-circle);
}

.testimonials-section .testimonial .name{
    margin-bottom: 16px;
    font-size: var(--font-size-xl);
    color: var(--primary-color);
}

.testimonials-section .testimonial .feedback{
    line-height: 25px;
    color:var(--dark-color);
}

.testimonials-section .swiper-pagination-bullet{
    height: 15px;
    width: 15px;
    opacity: 1;
    /* 
    opacity: controls transparency (0 = invisible, 1 = fully visible). 
- Affects the whole element + children. 
- Common uses: hover effects, fade animations, overlays. 
- For only background transparency → use rgba()/hsla() instead of opacity. 
    */
    background: var(--primary-color) ;
}

.testimonials-section .swiper-slide-button{
    color: var(--primary-color);
    transition: 0.3s ease 
}
.testimonials-section .swiper-slide-button:hover{
    color: var(--secondary-color);
}

/* Gallery section styling */
.gallery-section{
    padding: 50px 0 100px;
    background-color: var(--dark-color);
}

.gallery-section .section-title{
    color: var(--light-pink-color);
}

.gallery-section .gallery-list{
    display: flex;
    gap: 32px;
    flex-wrap: wrap;
}

.gallery-section .gallery-list .gallery-item{
    overflow: hidden;
    border-radius: var(--border-radius-s);
    width: calc(100% / 3 - 32px);
    /*  Divide container into 3 equal parts and subtract 32px for spacing between items */

}

.gallery-section .gallery-item .gallery-image{
    width: 100%;
    height: 100%;
    cursor: zoom-in;
    transition: 0.3s ease;
}

.gallery-section .gallery-item:hover .gallery-image{
    transform: scale(1.1);
    /* 
    transform: allows 2D/3D transformations on elements

1. scale(x, y)   → resize element (default: center)
   - scale(1.1) → 10% bigger
   - scale(0.5) → half size

2. translate(x, y) → move element without affecting layout
   - translate(20px, 10px) → shift 20px right, 10px down 
    Positive x → right, negative x → left
    Positive y → down, negative y → up

    transform: translateX(30px); only moves right/left 
    transform: translateY(-15px);  only moves up/down 

3. rotate(angle) → rotate element around transform-origin
   - rotate(45deg) → rotate 45 degrees clockwise

4. skew(x-angle, y-angle) → slant element along X/Y axis
   - skew(20deg, 0) → slant horizontally

5. matrix(...) → combine multiple transforms with one function (advanced)

Notes:
- Works with `transition` for smooth animations.
- `transform-origin` sets the pivot point (default: center).
    */
    transition: 1.0s;
}

/* Contact section styling */
.contact-section{
    padding: 50px 0 100px;
    background: var(--light-pink-color);
}

.contact-section .section-content{
    display: flex;
    gap: 48px;
    align-items: center;
    justify-content: space-between;
}

.contact-section .contact-info-list .contact-info{
    display: flex;
    gap: 20px;
    margin: 20px 0;
    align-items: center;
}

.contact-section .contact-info-list .contact-info i{
    font-size: var(--font-size-xxl);
}

.contact-section .contact-form .form-input{
    width: 100%;
    height: 50px;
    padding: 0 12px;
    outline: none;
    margin-bottom: 16px;
    font-size: var(--font-size-m);
    border-radius: var(--border-radius-s) ;
    border: 1px solid var(--dark-color);
}

.contact-section .contact-form{
    max-width: 50%;
}

.contact-section .contact-form textarea.form-input{
    height: 100px;
    padding: 12px;
    resize: vertical;
    /* 
    resize: vertical; 
    - Allows the user to resize the element **only vertically** (height). 
    - Commonly used for <textarea> or other resizable elements.
    - Horizontal resizing is disabled.

    */
}

.contact-section .contact-form .form-input:focus{
    border-color: var(--secondary-color);
}

.contact-section .contact-form .submit-button{
    padding: 10px 28px;
    outline: none;
    margin-top: 10px;
    border: 1px solid var(--primary-color);
    border-radius: var(--border-radius-m);
    background: var(--dark-color);
    color: var(--white-color);
    font-size: var(--font-size-m);
    font-weight: var(--font-weight-medium);
    transition: 0.3s ease;
}

.contact-section .contact-form .submit-button:hover{
    color: var(--primary-color);
    background: transparent;
}

/* Footer section styling */
.footer-section{
    background: var(--dark-color);
    padding: 20px 0;
}

.footer-section .section-content{
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.footer-section :where(.copyright-text, .social-link, .policy-link){
    color: var(--white-color);
    transition: 0.3s ease;
}

.footer-section .social-link-list{
    display: flex;
    gap: 30px;
}

.footer-section .social-link-list .social-link{
    font-size: var(--font-size-l);
}

.footer-section .social-link-list .social-link:hover,
.footer-section .policy-text .policy-link:hover{
    color: var(--primary-color);
}

/* responsive media query code for max-width 1024px */
@media screen and (max-width:1024px){
    .menu-section .menu-list{
        gap: 60px;
    }
    .menu-section .menu-list .menu-item{
        width: calc(100% / 3- 60px);
    }
}

/* responsive media query code for  max width 900px */
/* 
@media: applies styles based on device features (viewport, type, etc.)
- Example: @media screen and (max-width: 900px) { ... } 
  → styles inside apply only if screen width ≤ 900px
- Common features: width, height, orientation
- Useful for responsive design: adapt layout/fonts/nav/etc. to different screen sizes
- min-width → mobile-first approach; max-width → desktop-first approach


@ in CSS = at-rule, a special instruction for the browser.
Common at-rules:
- @media   → apply styles based on device features (responsive design)
- @import  → import another CSS file
- @font-face → define custom fonts
- @keyframes → create animations
- @supports → apply styles if browser supports a property/value
- @layer   → define CSS layers (control order of styles)
At-rules control behavior, not normal element styles.

*/

@media screen and (max-width: 900px){
    :root{
        --font-size-m:1rem;
        --font-size-l:1.3rem;
        --font-size-xl:1.5rem;
        --font-size-xxl:1.8rem;
    }

    body.show-mobile-menu header::before{
        /* this will blur the background when the menu bar is shown */
        content: "";
        position: fixed;
        left: 0;
        top: 0;
        height: 100%;
        width: 100%;
        backdrop-filter: blur(3px);
        /* 
        backdrop-filter: applies visual effects to the area **behind** the element.
        - blur(3px) → blurs the background by 3 pixels.
        - Works best with semi-transparent elements (e.g., rgba() or opacity < 1).
        - Common for frosted-glass effects on modals, navbars, overlays.
        - Can combine multiple filters: blur(), brightness(), contrast(), etc.
        */
        background: rgba(0,0,0,0.2);
    }

    .navbar :where(#menu-close-button, #menu-open-button){
        display: block;
        font-size: var(--font-size-l);
    }
    
    .navbar #menu-close-button{
        position: absolute;
        right: 30px;
        top: 30px;
    }
    .navbar #menu-open-button{
        color:white;
    }
    .navbar .nav-menu{
        display: block;
        position: fixed;
        left: -300px;
        top: 0px;
        width: 300px;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 100px;
        background: var(--white-color);
        transition: left 0.2s ease;

    }

    body.show-mobile-menu .navbar .nav-menu{
        left: 0px;
    }

    .navbar .nav-menu .nav-link{
        color: var(--dark-color);
        font-size:var(--font-size-l);
        display: block;
        margin-top: 17px;
    }

    .hero-section .section-content{
        flex-direction: column-reverse;
        justify-content: center;
        gap: 50px;
        text-align: center;
        padding: 30px 20px 20px;
    }

    .hero-section .hero-details :is(.subtitle, .description), .about-section, .about-details {
        max-width: 100%;
    }

    .hero-section .hero-details .buttons{
        justify-content: center;
    }

    .hero-section .hero-image-wrapper{
        max-width: 270px;
        margin-right:0 ;
    }

    .about-section .section-content{
        flex-direction: column-reverse;
        gap: 70px;
    }

    .about-section .about-image-wrapper .about-image{
        width: 100%;
        height: 100%;
        max-width: 250px;
        aspect-ratio: 1;
    }

    .menu-section .menu-list{
        gap: 30px;
    }
    .menu-section .menu-list .menu-item{
        width: calc(100% / 2 - 30px);
    }

    .menu-section .menu-list .menu-item .menu-image{
        max-width: 200px;
    }
}

@media screen and (max-width:640px){
    .menu-section .menu-list{
        gap: 60px;
    }
    .menu-section .menu-list .menu-item{
        width: 100%
    }

    .testimonials-section .swiper-slide-button{
        display: none;
    }

    .testimonials-section .swiper-slide-button{
        margin: 0 0 30px;
    }
}